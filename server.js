const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const http = require('http');
const fs = require('fs');
const expressIP = require('express-ip');
const app = express();
const PORT = process.env.PORT || 3000;
const server = http.createServer(app);
const bodyParser = require('body-parser');

const { MongoClient, ObjectId } = require('mongodb');


const { Chart, registerables } = require('chart.js');
const { createCanvas } = require('canvas');

Chart.register(...registerables);







const uri = "mongodb+srv://fwa:lozamaxim123@ida.qgq6c9a.mongodb.net/?retryWrites=true&w=majority";



const dbName = 'wd'; 
const collectionName = 'ad';



app.use(bodyParser.json());






const path = require('path');

app.use('/service-worker.js', express.static(path.join(__dirname, 'service-worker.js')));

app.get('/service-worker.js', (req, res) => {
  res.set('Service-Worker-Allowed', '/');
  res.sendFile(path.join(__dirname, 'service-worker.js'));
});


const DataTime = 0.5;
app.set("port", PORT);

// –û–°–ù–û–í–ù–ò–ô –ë–û–¢ 2056524233:AAGuWmoiRAAIEGVPGdxXqQYCqeS8rR2gxiI
// –ë–û–¢ –î–õ–Ø –¢–ï–°–¢–£–í–ê–ù–ù–Ø 5312847705:AAE0ii_TUhEeuNPRV52iiFmB0bsEInhANt4


var API_KEY_BOT = '6458492028:AAE53VvJfvLziVeP6O7ke1i4qJRSUKFqUd0';

let private = [];
if (process.env.PORT) {
API_KEY_BOT = "6458492028:AAE53VvJfvLziVeP6O7ke1i4qJRSUKFqUd0"
} else {
  API_KEY_BOT = "5312847705:AAE0ii_TUhEeuNPRV52iiFmB0bsEInhANt4"
}
const bot = new TelegramBot(API_KEY_BOT, {
  polling: true 
});


let ips = [];

app.use(express.json());


async function getAllData() {
  const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

  try {
    await client.connect();

    const database = client.db(dbName);
    const collection = database.collection(collectionName);


    const result = await collection.find({}).toArray();


    return result;
  } catch (error) {
    console.error(error);
    throw error; 
  } finally {
    await client.close();
  }
}


app.use("/web", express.static(__dirname + "/web"));

app.use(expressIP().getIpInfoMiddleware);
app.get("/", (req, res) => {
  res.redirect("/web/html/menu.html");
});

app.get("/p", (req, res) => {
  const userIP = req.ipInfo.ip;

  res.json({
    "ip": userIP
  });
});

app.get('/get_db', async (req, res) => {
  try {
    const data = await getAllData();
    res.status(200).json(data);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error });
  }
});

app.post('/New', async (req, res) => {
  console.log(123123)
  await bot.sendMessage(req.body.idtg, `–£—á–µ–Ω—å ${req.body.nick} –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è`);
});


app.put('/put_db/:id', async (req, res) => {
  const id = req.params.id;
  let updatedData = req.body;
  const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

  try {
    await client.connect();
    const database = client.db(dbName);
    const collection = database.collection(collectionName);
    if (updatedData._id) {
          delete updatedData._id;
    }


    await collection.updateOne({ _id: new ObjectId(id) }, { $set: updatedData });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error});
  } finally {
    await client.close();
  }
});



app.post('/push_db', async (req, res) => {
  try {
    const database = client.db(dbName);
    const collection = database.collection(collectionName); 
    const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });
    await client.connect();

    const result = await collection.insertOne(req.body);
    res.status(200).json({ message: '–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ MongoDB', insertedId: result.insertedId });
    }
    catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –≤ MongoDB:', error);
    res.status(500).json({ message: '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö' });
    }
    finally {
    client.close();
  }
});


async function push_db(data) {
    const database = client.db(dbName);
    const collection = database.collection(collectionName); 
    const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });
    await client.connect();
    await collection.insertOne(data);
}
async function createBarChart(id) {
  const canvas = createCanvas(800, 600);
  const ctx = canvas.getContext('2d');
  let data = [];
  let libs = [];

  try {
      const dd = await getAllData();
      const did = dd.find(o => o.tg === id);
      const p = did.stats;

      p.forEach((g) => {
          data.push(g.r);
          libs.push(g.i);
      });

      const chart = new Chart(ctx, {
          type: 'bar',
          data: {
              labels: libs,
              datasets: [{
                  label: '–á–∂–∞',
                  data: data,
                  backgroundColor: 'rgba(75, 192, 192, 0.2)',
                  borderColor: 'rgba(75, 192, 192, 1)',
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  x: [{ type: 'category' }],
                  y: [{ type: 'linear', beginAtZero: true }]
              }
          }
      });
      const buffer = canvas.toBuffer('image/png');
      bot.sendPhoto(id, buffer);
  } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏:", error);
  }
}


app.get("/state", (req, res) => {
  res.json(private)
});
app.get("/getips", (req, res) => {
  res.json(JSON.stringify(ips));
});
app.post('/addValue', async (req, res) => {
  const usercli = req.body.user;
  ips.push(req.body.value);
  await bot.sendMessage(req.body.tgid, `–£—á–µ–Ω—å ${req.body.nick} –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–≤ –∑–∞ ${usercli} —Å—Ç—Ä–∞–≤—É`);
});


app.get("*", (req, res) => {
  const filePath = req.url.substr(1);

  fs.stat(filePath, (err, stats) => {
    if (err) {
      res.status(404).send("–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!");
    } else {
      if (stats.isDirectory()) {
        res.status(404).send("–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!");
      } else {
        fs.createReadStream(filePath).pipe(res);
      }
    }
  });
});



let d = false

setInterval(() => {
const tr = new Date();

  if (!d && tr.getHours()==6 && tr.getMinutes()==0) {
    d = true
  console.log('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—á–∏—Ç–µ–ª—è–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ')
  getAllData().then(async users=>{
    users.map(async s=>{
    await bot.sendMessage(s.tg, `üë©‚Äçüè´ –î–æ—Ä–æ–≥—ñ –≤—á–∏—Ç–µ–ª—ñ, –Ω–∞–≥–∞–¥—É—é –≤–∞–º –ø—Ä–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ –æ–±—ñ–¥ —É —à–∫—ñ–ª—å–Ω—ñ–π —Å—Ç–æ–ª–æ–≤—ñ–π! üçΩÔ∏è`);
 setTimeout(()=>{
  d = false
 },60000)
    })
  })}
}, 1);






function gen() {
  return Math.floor(100000 + Math.random() * 900000);
}



let gig = '';

function c() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: '5-–û', callback_data: '5-–û' }, { text: '5-–ö', callback_data: '5-–ö' }],
        [{ text: '5-–ú', callback_data: '5-–ú' }, { text: '6-–ê', callback_data: '6-–ê' }],
        [{ text: '6-–ë', callback_data: '6-–ë' }, { text: '6-–ö', callback_data: '6-–ö' }],
        [{ text: '6-–ú', callback_data: '6-–ú' }, { text: '6-–°', callback_data: '6-–°' }],
        [{ text: '7-–ê', callback_data: '7-–ê' }, { text: '7-–ú', callback_data: '7-–ú' }],
        [{ text: '7-–î', callback_data: '7-–î' }, { text: '7-–ù', callback_data: '7-–ù' }],
        [{ text: '8-–ê', callback_data: '8-–ê' }, { text: '8-–ú', callback_data: '8-–ú' }],
        [{ text: '8-–õ', callback_data: '8-–õ' }, { text: '9-–°', callback_data: '9-–°' }],
        [{ text: '9-–í', callback_data: '9-–í' }, { text: '9-–ê', callback_data: '9-–ê' }],
        [{ text: '10-–ê', callback_data: '10-–ê' }, { text: '10-–ö', callback_data: '10-–ö' }],
        [{ text: '11-–ê', callback_data: '11-–ê' }, { text: '11-–ú', callback_data: '11-–ú' }],
      ],
    },
  };
}

function sc() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }],
      ],
    },
  };
}
const butthons =             

[
  '–°—Ç–≤–æ—Ä–∏—Ç–∏ –í–∏–±—ñ—Ä —ó–∂—ñü•ó',
  '–î—ñ–∑–Ω–∞—Ç–∏—Å—å –º—ñ–π class idüÜî',
  '–ü–æ–∫–∞–∑–∞—Ç–∏ —É—á–Ω—ñ–≤ —É –º–æ—î–º—É –∫–ª–∞—Å—ñüë®üèº‚Äçüè´',
  '–†—É—á–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—èüîß',
  '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Éüìà'
]


const butthonss = [
  [butthons[0]],
  [butthons[1]],
  [butthons[2]],
  [butthons[3]],
  [butthons[4]]

  
];
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  let s = JSON.parse(data);
  console.log(s.d)
  if (s.d == 'back') {
    
    getAllData().then((clas)=>{    
      let z = clas.find(h=>h.tg==chatId);
      if (z.eat1 == s.h) {
        z.za++
        console.log(321)
        check(z.class,z).then(async ()=>await bot.sendMessage(chatId,"–î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ‚úÖ"));
      }
      else if (z.eat2 == s.h) {
        z.nine++       
        console.log(123)
        check(z.class,z).then(async ()=>await bot.sendMessage(chatId,"–î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ‚úÖ"));
      }


    })
  }
else {



  if (data === '') {

  }

  

  if (data === '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏') {
    if (gig) {
      const f = gen();
      bot.sendMessage(chatId, `–í–∏ –æ–±—Ä–∞–ª–∏ –∫–ª–∞—Å: ${gig}`);
      


              
        await createData({
          "class": gig,
          "eat1": "",
          "eat2": "",
          "za": 0,
          "nine": 0,
          "tg": chatId,
          "classid": f,
          "stats":[],
          "users": []
        });
      

      await bot.sendMessage(chatId, `–í–∞—à class id:`);
      await bot.sendMessage(chatId, f);

      await bot.sendMessage(chatId, `–ú–µ–Ω—é –±–æ—Ç–∞`, {
        reply_markup: {
          keyboard: butthonss,
          resize_keyboard: true,
        }
      });
    } else {
      await bot.sendMessage(chatId, '–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å');
    }
  } else {
    gig = data;
    const confirmKeyboard = sc();
    await bot.sendMessage(chatId, `–í–∏ –æ–±—Ä–∞–ª–∏ –∫–ª–∞—Å: ${gig}\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∏–±—ñ—Ä:`, confirmKeyboard);
  }

}
});


async function get(url) {                                              
  try {                                              
    const response = await fetch(url);                                               
    if (!response.ok) {                                              
      throw new Error(response.status);                                              
    }                                              
    const data = await response.json();                                              
    return data;                                               
  } catch (error) {                                              
    console.error(error);                                               
    throw error;                                               
  }                                              
 } 

 
const commands = [

  {

      command: "menu",
      description: "–ü–æ–∫–∞–∑—Ç–∏ –º–µ–Ω—é"

  }
]

async function getUserClass(tgId) {
  const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

  try {
    await client.connect();

    const database = client.db(dbName);
    const collection = database.collection(collectionName);

    const result = await collection.findOne({ tg: tgId });

    return result;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–ª–∞—Å—É –∑ MongoDB:', error);
    throw error;
  } finally {
    await client.close();
  }
}

let sm = [];
bot.on('text', async (nextMsg) => {
  try {
    var chatId = nextMsg.from.id;
    global.msgd = nextMsg;
    let e = true; 

    if (nextMsg.text.startsWith('/start')) {
      const data = await getAllData();

      var existingUser = data.find(da => da.tg === nextMsg.from.id);

      if (!existingUser) {
        const classKeyboard = c();
        await bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å, —è–∫–∏–º –≤–∏ –∫–µ—Ä—É—î—Ç–µ:', classKeyboard);
      } else {
        await bot.sendMessage(chatId, '–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ');
      }
      
      await bot.setMyCommands(commands);
    } else if (nextMsg.text == "/menu") {        
      await bot.setMyCommands(commands);
      await bot.sendMessage(chatId, `–ú–µ–Ω—é –±–æ—Ç–∞`, {
        reply_markup: {
          keyboard: butthonss,
          resize_keyboard: true, 
        }
      });
    } else if (nextMsg.text == "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –º—ñ–π class idüÜî") {
      const userClass = await getUserClass(nextMsg.chat.id);

      if (userClass) {
        await bot.sendMessage(nextMsg.chat.id, userClass.classid);
      } else {
        console.log("–ü–æ–º–∏–ª–∫–∞ 404");
      }
    } else if (nextMsg.text == "–ü–æ–∫–∞–∑–∞—Ç–∏ —É—á–Ω—ñ–≤ —É –º–æ—î–º—É –∫–ª–∞—Å—ñüë®üèº‚Äçüè´") {
      const userClass = await getUserClass(nextMsg.chat.id);

      if (userClass) {
        userClass.users.forEach(async (d) => {
          await bot.sendMessage(nextMsg.chat.id, d.name);
        });

        if (userClass.users.length == 0) {
          await bot.sendMessage(nextMsg.chat.id, `–í –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ–º–∞—î —É—á–Ω—ñ–≤üò≠`);
        }
      } else {
        console.log("–ü–æ–º–∏–ª–∫–∞ 404");
      }
    }
    else if (nextMsg.text == butthons[3]) {
    
getAllData().then(async (all)=>{
let z = all.find(h=>h.tg==nextMsg.chat.id)


      
function dwa() {

  return {
    reply_markup: {
      inline_keyboard: [    
        [
      { text: z.eat1, callback_data: JSON.stringify({d:"back",h:z.eat1})},
      { text: z.eat2, callback_data: JSON.stringify({d:"back",h:z.eat2})}
        ]
      ],
    },
  };
}

const d = dwa();






      await bot.sendMessage(nextMsg.chat.id, `–†—É—á–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è:`,d);


    })



    }
else if (butthons[4] == nextMsg.text) {
  createBarChart(nextMsg.from.id)
}

    else if (nextMsg.text == "–°—Ç–≤–æ—Ä–∏—Ç–∏ –í–∏–±—ñ—Ä —ó–∂—ñü•ó") {
      await bot.sendMessage(nextMsg.chat.id, "–ù–∞—Å—Ç—É–ø–Ω—ñ 2 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å —Å—Ç—Ä–∞–≤–∞–º–∏");

      bot.on('text', async (w) => {
        if (e) {
          sm.push(w.text);

          if (sm.length >= 2) {
            e = false;
            await bot.sendMessage(chatId, '–°—Ç—Ä–∞–≤–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

            let fd = {
              "class": "",
              "eat1": sm[0],
              "eat2": sm[1],
              "za": 0,
              "nine": 0,
              "tg": nextMsg.chat.id
            };

            let g = "";
            const dat = await getAllData();
            const userClass = dat.find(o => o.tg === nextMsg.chat.id);

            if (userClass) {
              g = userClass.class;

              fd.class = g;

       
              check(fd.class, fd)
              .then(() => {
                sned(fd);
              })
              .catch(async error => {
                await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–æ—à—É –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—É');
                console.log(error);
              });
          
            }

            sm = [];
          }
        }
      });
    }
  } catch (error) {
    console.log(error);
  }
});





async function check(tc, dt) {

  try {
    getAllData().then(async data=>{

       const to = data.find(item => item.class == tc);

    if (to) {
      
      await updateData(to._id, dt);
    } 
  
  
  })
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É –≤ MongoDB:', error);
  } 
}


bot.on('polling_error', (error) => {
  console.error(error);
});


async function updateData(itemId, newData) {
  const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

  try {
    await client.connect();
    const database = client.db(dbName);
    const collection = database.collection(collectionName);

    await collection.updateOne({ _id: itemId }, { $set: newData });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –≤ MongoDB:', error);
  } finally {
    await client.close();
  }
}



async function createData(newData) {
  const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

  try {
    await client.connect();
    const database = client.db(dbName);
    const collection = database.collection(collectionName);

    const result = await collection.insertOne(newData);


  } catch (error) {
    console.error(error);
  } finally {
    await client.close();
  }
}


async function sned(d) {

    let g = {
      class:d.class,
      state:true
    }


    private.push(g)









    setTimeout(async () => {
    ips = [];    
    const fo = private.find(o => o.class == d.class);
    
    if (fo) {
      fo.state = false
    }
    else {
     console.log(1241111111)
    }
    private = [];

    getAllData().then(async (dd) => {
      let did = dd.find(o => o.class === d.class);
    
      let y = did;
      let o;
      let p;
      
      
      const t = y.za + y.nine;
      
      if (y.za > y.nine) {
          o = (y.za / t) * 100;
          p = y.eat1;
      } else if (y.za < y.nine) {
          o = (y.nine / t) * 100;
          p = y.eat2;
      } else if (y.za === y.nine) {
          o = '===';
          p = '===';
      }
      
      let j = {
          r: `${o.toFixed(0)}`,
          i: p
      };
      
      
      y.stats.push(j)
    
      check(y.class,y)
      await bot.sendMessage(did.tg, `
      –ó–∞ "${did.eat1}" –ø—Ä–æ–≥—É–ª—É—Å—É–≤–∞–ª–∏ ${did.za}
      \n–∑–∞ "${did.eat2}" –ø—Ä–æ–≥—É–ª—É—Å—É–≤–∞–ª–∏ ${did.nine}
      \n—É—Å—å–≥–æ –ø–æ—Ä—Ü—ñ–π: ${did.za+did.nine}`
      );
     
    })
   }, DataTime * 60 * 1000)
 
 }    
    





server.listen(PORT, function () {
  console.log("start server on", PORT);
});
